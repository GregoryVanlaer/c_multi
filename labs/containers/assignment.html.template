<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <title>PVM Assignment</title>
    <%= stylesheets('pvm') %>
    <%= scripts('jquery', 'jquery-ui', 'underscore', 'ace/ace', 'source-editor', 'revealer', 'quiz', 'html') %>
  </head>

  <body>
    <header>
      <div class="center-vertically">Containers</div>
    </header>
    <div id="contents">
      <%=
         exercise(Lib::Interpretation) do
           self.source = <<-END
             #include <iostream>
             #include <vector>

             int main()
             {
               std::vector<int> ns { 1, 3, 2, 4 };

               for ( auto n : ns )
                 std::cout << n;
             }
           END

           <<-END
             <p>What is the output of the following code?</p>
             #{show_source_editor}
             #{if input then show_input else '' end}
             #{show_output_field}
             <div data-revealer="Show explanation" class="explanation">
               <p>
                 <code>auto</code> is similar to C#'s <code>var</code>:
                 it lets the compiler deduce the type for you.
                 <code>n</code> has actually type <code>int</code> in the above code.
               </p>
             </div>
           END
         end
      %>

      <%=
        exercise do
          extend SolutionMixin

          <<-END
            <p>
              Write the function <code>bool is_palindrome(std::vector&lt;int&gt; ns)</code>
              that checks whether the given sequence is a palindrome, i.e.
              that it is equal to its reverse.
            </p>
          END
        end
      %>

      <%=
         exercise(Lib::Interpretation) do
           self.source = <<-END
             #include <iostream>
             #include <vector>

             void foo(std::vector<int> ns)
             {
               for ( unsigned i = 0; i != ns.size(); ++i )
               {
                 ns[i] *= ns[i];
               }
             }

             int main()
             {
                std::vector<int> ns { 1, 2, 3, 4 };

                foo(ns);

                for ( auto n : ns )
                {
                  std::cout << n;
                }
             }
           END

           <<-END
             <p>What is the output of the following code?</p>
             #{show_source_editor}
             #{if input then show_input else '' end}
             #{show_output_field}
             <div data-revealer="Show explanation" class="explanation">
               <p>
                 Everything is passed by value in C++. This means
                 that <code>foo</code> operates on a <em>copy</em>.
               </p>
             </div>
           END
         end
      %>

      <%=
         exercise(Lib::Interpretation) do
           self.source = <<-END
             #include <iostream>
             #include <vector>

             void foo(std::vector<int>* ns)
             {
               for ( unsigned i = 0; i != (*ns).size(); ++i )
               {
                 (*ns)[i] *= (*ns)[i];
               }
             }

             int main()
             {
                std::vector<int> ns { 1, 2, 3, 4 };

                foo(&ns);

                for ( auto n : ns )
                {
                  std::cout << n;
                }
             }
           END

           <<-END
             <p>What is the output of the following code?</p>
             #{show_source_editor}
             #{if input then show_input else '' end}
             #{show_output_field}
             <div data-revealer="Show explanation" class="explanation">
               <p>
                 <code>foo</code> receives a pointer to the vector, meaning
                 it gets direct access to it and can modify it.
               </p>
             </div>
           END
         end
      %>

      <%=
         exercise(Lib::Interpretation) do
           self.source = <<-END
             #include <iostream>
             #include <vector>

             int main()
             {
                std::vector<int> ns { 1, 2, 3, 4 };
                std::vector<int> ms { 6, 7, 8 };

                ns = ms;

                for ( auto n : ns )
                {
                  std::cout << n;
                }
             }
           END

           <<-END
             <p>What is the output of the following code?</p>
             #{show_source_editor}
             #{if input then show_input else '' end}
             #{show_output_field}
             <div data-revealer="Show explanation" class="explanation">
               <p>
                 Assignment between vectors clears the left hand vector and copies
                 all elements from the right hand vector into it.
               </p>
             </div>
           END
         end
      %>

      <%=
         exercise(Lib::Interpretation) do
           self.source = <<-END
             #include <iostream>
             #include <vector>

             int main()
             {
                std::vector<int> ns { 1, 2, 3, 4 };
                std::vector<int> ms { 6, 7, 8 };

                ns = ms;
                ms.clear();

                for ( auto n : ns )
                {
                  std::cout << n;
                }
                
                std::cout << "|";
                
                for ( auto m : ms )
                {
                  std::cout << m;
                }
             }
           END

           <<-END
             <p>What is the output of the following code?</p>
             #{show_source_editor}
             #{if input then show_input else '' end}
             #{show_output_field}
             <div data-revealer="Show explanation" class="explanation">
               <p>
                 Do not confuse this with Java semantics. In Java, assignment
                 does not operate on objects but on references to objects.
                 Setting one <code>ArrayList</code> equal to another
                 (<code>ns = ms</code>) lets <code>ns</code> and
                 <code>ms</code> point to the same object.
               </p>
               <p>
                 No so in C++: <code>ns = ms</code> actually assigns
                 the <em>object</em> <code>ms</code> to <code>ns</code>.
                 In other words, you're asking "modify the list <code>ns</code>
                 so that it is equal to <code>ms</code>", which has the effect
                 that <code>ns</code> is cleared and all of <code>ms</code>'s
                 items are copied to <code>ns</code>. Now you have two
                 distinct lists in memory, containing the same elements.
               </p>
               <p>
                 In the second step, <code>ms.clear()</code> removes all elements
                 from <code>ms</code>, but <code>ns</code> is not affected by this.
               </p>
             </div>
           END
         end
      %>

      <%=
        exercise do
          extend SolutionMixin

          <<-END
            <p>
              Write a function <code>void rotate(std::vector&lt;int&gt;* ns, int delta)</code> that
              moves the elements of <code>ns</code> around in a circle. For example,
              <code>{1, 2, 3, 4, 5}</code> rotated by 1 should yield <code>{5, 1, 2, 3, 4}</code>.
              Negative <code>delta</code>s are allowed: <code>{1, 2, 3, 4, 5}</code> rotated
              by <code>-1</code> gives <code>{2, 3, 4, 5, 1}</code>.
            </p>
          END
        end
      %>

      <%=
        exercise do
          extend SolutionMixin

          <<-END
            <p>
              Write a function <code>void uniq(std::vector<int>* ns)</code> that
              removes all duplicates from <code>ns</code>. The order is the remaining elements is unimportant.
            </p>
          END
        end
      %>
             
      <%=
         exercise(Lib::Interpretation) do
           self.source = <<-END
             #include <iostream>
             #include <vector>

             std::vector<char> foo(std::vector<char>* cs)
             {
               return *cs;
             }

             int main()
             {
               std::vector<char> cs { 'a', 'b', 'c' };
               auto ds = foo(&cs);

               cs.clear();

               for ( auto d : ds )
               {
                 std::cout << d;
               }
             }
           END

           <<-END
             <p>What is the output of the following code?</p>
             #{show_source_editor}
             #{if input then show_input else '' end}
             #{show_output_field}
             <div data-revealer="Show explanation" class="explanation">
               <p>
                 <code>foo</code> returns a <code>std::vector&lt;char&gt;</code>,
                 not a <code>std::vector&lt;char&gt;*</code>, i.e. a copy.
                 In other words, <code>ds</code> is a separate list and clearing
                 <code>cs</code> does not affect <code>ds</code>.
               </p>
             </div>
           END
         end
      %>

      <%=
         exercise(Lib::Interpretation) do
           self.source = <<-END
             #include <iostream>
             #include <vector>

             int main()
             {
                std::vector<int> ns { 1, 2, 3, 4 };
                std::vector<int>* p = &ns;

                for ( auto n : *p )
                {
                  std::cout << n;
                }
             }
           END

           <<-END
             <p>What is the output of the following code?</p>
             #{show_source_editor}
             #{if input then show_input else '' end}
             #{show_output_field}
             <div data-revealer="Show explanation" class="explanation">
               <p>
                 Iterating over <code>*p</code> or <code>ns</code> is equivalent:
                 <code>p</code> points to <code>ns</code>.
               </p>
             </div>
           END
         end
      %>
              
      <%=
         exercise(Lib::Interpretation) do
           self.source = <<-END
             #include <iostream>
             #include <vector>

             int main()
             {
                std::vector<int> ns { 1, 2, 3, 4 };
                std::vector<int> ms { 5, 6, 7 };
                
                auto p = &ns;
                auto q = &ms;

                p = q;

                for ( auto n : *p )
                {
                  std::cout << n;
                }

                std::cout << "|";

                for ( auto m : *q )
                {
                  std::cout << m;
                }
              }
           END

           <<-END
             <p>What is the output of the following code?</p>
             #{show_source_editor}
             #{if input then show_input else '' end}
             #{show_output_field}
             <div data-revealer="Show explanation" class="explanation">
               <p>
                 First <code>p</code> points to <code>ns</code> and <code>q</code> to <code>ms</code>.
                 Next, we assign <code>q</code> to <code>p</code>, i.e. we overwrite the <em>pointer</em>
                 with another address. Both <code>p</code> and <code>q</code> now point to <code>ms</code>.
               </p>
             </div>
           END
         end
      %>

      <%=
         exercise(Lib::Interpretation) do
           self.source = <<-END
             #include <iostream>
             #include <vector>
             #include <set>

             int main()
             {
               std::vector<char> vec { 'x', 'y', 'z' };
               std::set<char> set(vec.begin(), vec.end());

               for ( auto c : set )
               {
                 std::cout << c;
               }
             }
           END

           <<-END
             <p>What is the output of the following code?</p>
             #{show_source_editor}
             #{if input then show_input else '' end}
             #{show_output_field}
             <div data-revealer="Show explanation" class="explanation">
               <p>
                 You can initialise a container using iterators. It will
                 then copy all items from the other container.
               </p>
             </div>
           END
         end
      %>

      <%=
        exercise do
          extend SolutionMixin

          <<-END
            <p>
              Write a function <code>std::vector&lt;int&gt; crop(std::vector&lt;int&gt; ns, unsigned n)</code>
              that returns a list equal to <code>ns</code> but with <code>n</code> elements from the beginning and end of <code>ns</code>.              
            </p>
            <p>
              Rely on iterators to implement this.
            </p>
          END
        end
      %>

      <%=
        exercise do
          extend SolutionMixin

          <<-END
            <p>
              Write a function <code>template&lt;typename Iterator&gt; void clamp(Iterator start, Iterator end)</code>
              that iterates through the elements and sets all negative values it encounters to zero.
              <code>start</code> points to the first element, <code>end</code> points to one past the last element.
            </p>
            <p>
              For example, if given the vector <code>{ 1, -2, 3, -4, 5 }</code>, it transforms this vector into
              <code>{1, 0, 3, 0, 5}</code>.
            </p>
            <p>
              Write the code in the header file: this is a requirement for templated functions.
            </p>
          END
        end
      %>

      <%=
        exercise do
          extend SolutionMixin

          <<-END
            <p>
              Write a function <code>template&lt;typename Iterator&gt; void reverse(Iterator start, Iterator end)</code>
              that reverses the order of the elements delimited by the iterators. <code>start</code> points
              to the first element, <code>end</code> points to one past the last element.
            </p>
            <p>
              <code>reverse</code> should work on vectors and lists, and on any type of element.
            </p>
          END
        end
      %>
              
      <%=
         exercise(Lib::Interpretation) do
           self.source = <<-END
             #include <iostream>
             #include <set>
             #include <algorithm>

             bool is_odd(int x)
             {
               return x % 2;
             }

             int main()
             {
               std::set<int> set {1, 2, 3, 4, 5, 6, 7};

               std::cout << std::count_if(set.begin(), set.end(), is_odd);
             }
           END

           <<-END
             <p>What is the output of the following code?</p>
             #{show_source_editor}
             #{if input then show_input else '' end}
             #{show_output_field}
             <div data-revealer="Show explanation" class="explanation">
               <p>
                 This code prints the number of odd numbers in the set.
               </p>
             </div>
           END
         end
      %>

      <%=
         exercise(Lib::Interpretation) do
           self.source = <<-END
             #include <iostream>
             #include <vector>
             #include <algorithm>

             bool predicate(int x)
             {
               return x * x > 20;
             }

             int main()
             {
               std::vector<int> set {1, 2, 3, 4, 5, 6, 7};

               *std::find_if(set.begin(), set.end(), predicate) = 0;

               for ( auto c : set )
               {
                 std::cout << c;
               }
             }
           END

           <<-END
             <p>What is the output of the following code?</p>
             #{show_source_editor}
             #{if input then show_input else '' end}
             #{show_output_field}
             <div data-revealer="Show explanation" class="explanation">
               <p>
                 <code>find_if</code> looks for the first item that satisfies
                 the predicate, i.e. the first number whose square is larger
                 than 20. In our example, this is 5. <code>find_if</code> returns
                 an <em>iterator</em> to this item.
               </p>
               <p>
                 Given this iterator, we overwrite the item it points to
                 using <code>*it = 0;</code>. In other words, 5 gets overwritten
                 by <code>0</code>.
               </p>
             </div>
           END
         end
      %>

      <%=
        exercise do
          extend SolutionMixin

          <<-END
            <p>
              Write the function <code>void trim(std::string* str)</code> that
              removes all whitespace in front and at the end of the string.
              For example, <code>"  xyz    "</code> should be turned into <code>"xyz"</code>.
            </p>
            <ul>
              <li>
                To find out whether a character is whitespace, use the function <a href="http://www.cplusplus.com/reference/cctype/isspace/"><code>isspace</code></a>
                for which you need to include <code>cctype</code>.
              </li>
              <li>
                Use <a href="http://www.cplusplus.com/reference/algorithm/find_if_not/"><code>std::find_if_not</code></a>
                to find where the whitespace and both ends end.
                Rely on reverse iterators to find the trailing whitespace.
              </li>
              <li>
                Use <code>std::string</code>'s <a href="http://www.cplusplus.com/reference/string/basic_string/erase/"><code>erase</code></a>
                member function to remove characters from a string.
              </li>
            </ul>
          END
        end
      %>
    </div>
  </body>

  <script>
    Quiz.formatQuizzes();
    SourceEditor.initialize();
    Revealer.initialize();
  </script>
</html>
